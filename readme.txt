HW 4 README - Jamie Schwartz (jamiesch)

I started my L-System project by making a linked list class to represent the input string. I wrote a function to expand the seed string by converting it to a linked list and then iterating through that linked list and replacing each character with its corresponding new set of characters from the grammar map. Once the seed was fully expanded (after the number of iterations set in the GUI), I passed that expanded string into the TurtleParser. The TurtleParser iterated through this expanded string and for each character, performed some action on the turtle to change its state. For example, 'F' moved the turtle forward and then drew a new branch at that new location. Only 'F' and 'L' actually drew geometry; the rest of the cases for the other characters just rotated the turtle or kept track of the turtle stack, in order to allow for branching. I had a lot of trouble with the order of transformations that were being applied to the turtles and eventually simplified my turtle class so that it only kept track of its position and direction, and the rotate function only modified the direction of the turtle. Once I had the basic structure of the assignment working, I focused on trying to develop a grammar for the tree. This consisted of a lot of trial and error to see how to expand the string in a way that would make the final product look the way I wanted it to. I added leaves in at the ends of some of the branches also; these leaves are drawn whenever there is an 'L' in the expanded string. To load in the meshed for the branches, trunk (which I just drew one of at the beginning of the program), and leaves, I used the web-gl obj loader that was recommended to us. I had to go through the positions and normals that were read in by that loader and add a 4th coordinate to each vector in order for the meshes to be rendered properly. I loaded in one instance of each  mesh at the beginning and then every time I wanted to draw a new branch or leaf, I just made a new Branch or Leaf object and copied over the vertex data from the default mesh for that object, and then transformed it accordingly. On the GUI, I added attributes so that the user can control the color of the tree, the number of iterations performed, and the initial axiom, as well as a button to reload the tree with these new attributes set.